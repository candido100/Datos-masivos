# -*- coding: utf-8 -*-
"""Housing_LinearRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yLVquoJRhvof_FdoXkAvRg_Ek_wEcnXC
"""

import numpy as np
import pandas as pd
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Cargar el conjunto de datos de Boston
boston_dataset = fetch_california_housing()
data = pd.DataFrame(data=boston_dataset.data, columns=boston_dataset.feature_names)
data['PRICE'] = boston_dataset.target

# Mostrar las primeras filas del conjunto de datos
print(data.head())

# Descripción del conjunto de datos
print(data.describe())

# Mostrar el par de gráficos para ver relaciones entre variables
sns.pairplot(data, x_vars=['HouseAge', 'AveBedrms', 'Population'], y_vars='PRICE', height=5, aspect=0.7)
plt.show()

# Matriz de correlación
plt.figure(figsize=(10, 8))
correlation_matrix = data.corr().round(2)
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm')
plt.show()

# Selección de características y variable objetivo
X = data[['HouseAge', 'AveBedrms', 'Population']]  # Puedes añadir más características
y = data['PRICE']

# División de los datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crear el modelo de regresión lineal
model = LinearRegression()

# Entrenar el modelo
model.fit(X_train, y_train)

# Coeficientes del modelo
print(f"Coeficientes: {model.coef_}")
print(f"Intercepto: {model.intercept_}")

# Predicciones
y_train_pred = model.predict(X_train)
y_test_pred = model.predict(X_test)

# Métricas de evaluación
print(f"Error Cuadrático Medio (MSE) en entrenamiento: {mean_squared_error(y_train, y_train_pred)}")
print(f"Error Cuadrático Medio (MSE) en prueba: {mean_squared_error(y_test, y_test_pred)}")
print(f"Coeficiente de determinación (R^2) en entrenamiento: {r2_score(y_train, y_train_pred)}")
print(f"Coeficiente de determinación (R^2) en prueba: {r2_score(y_test, y_test_pred)}")

# Gráfico de dispersión de predicciones vs valores reales
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_test_pred, edgecolor='k', alpha=0.7)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=3)
plt.xlabel('Valores Reales')
plt.ylabel('Predicciones')
plt.title('Predicciones vs Valores Reales')
plt.show()
}